{"version":3,"sources":["App.js","index.js"],"names":["Loading","Skeleton","variant","width","height","style","margin","cityList","getUrlForCity","city","IconWithDescription","icon","description","flex","display","alignItems","flexDirection","src","alt","backgroundColor","borderRadius","padding","App","state","data","isLoaded","fetchWeatherForCity","fetch","then","response","json","setState","handleChange","e","target","value","localStorage","setItem","setTimeout","localCity","getItem","indexOf","this","fetchCityFromLocalStorage","citySelect","map","item","MenuItem","key","className","FormControl","disabled","InputLabel","htmlFor","Select","onChange","textAlign","marginBottom","justifyContent","weather","weatherData","id","Grow","in","Paper","elevation","Table","TableBody","TableRow","TableCell","align","main","temp","temp_min","temp_max","pressure","humidity","Math","round","wind","speed","Fragment","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2dd382fd.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './App.css'\r\nimport {\r\n  Paper,\r\n  Table,\r\n  TableRow,\r\n  TableBody,\r\n  TableCell,\r\n  Grow,\r\n  Select,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem\r\n} from '@material-ui/core'\r\nimport Skeleton from '@material-ui/lab/Skeleton'\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <Skeleton\r\n      variant='text'\r\n      width='100%'\r\n      height={18}\r\n      style={{ margin: '14px 0' }}\r\n    />\r\n  )\r\n}\r\n\r\nconst cityList = [\r\n  'Warszawa',\r\n  'Łódź',\r\n  'Poznań',\r\n  'Wrocław',\r\n  'Lublin',\r\n  'Rzeszów',\r\n  'Bydgoszcz',\r\n  'Szczecin',\r\n  'Białystok',\r\n  'Gdańsk',\r\n  'Gorzów Wielkopolski',\r\n  'Katowice',\r\n  'Kielce',\r\n  'Kraków',\r\n  'Olsztyn',\r\n  'Opole',\r\n  'Toruń',\r\n  'Zielona Góra'\r\n]\r\n\r\nconst getUrlForCity = city =>\r\n  `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&lang=pl&appid=44436d16bd424daef5fce773bf6fe022`\r\nconst iconUrl = 'http://openweathermap.org/img/wn/'\r\n\r\nconst localWeatherKey = 'weatherCity'\r\n\r\nconst IconWithDescription = ({ icon, description }) => (\r\n  <div\r\n    style={{\r\n      flex: '0 1',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      flexDirection: 'column'\r\n    }}\r\n  >\r\n    <img\r\n      src={`${iconUrl}${icon}.png`}\r\n      alt={description}\r\n      style={{\r\n        backgroundColor: 'lightskyblue',\r\n        borderRadius: '50%',\r\n        margin: 5,\r\n        padding: 5\r\n      }}\r\n    />\r\n    <span>{description}</span>\r\n  </div>\r\n)\r\n\r\nclass App extends Component {\r\n  state = {\r\n    data: null,\r\n    isLoaded: false,\r\n    city: ''\r\n  }\r\n\r\n  fetchCityFromLocalStorage() {\r\n    let city = cityList[0]\r\n    const localCity = localStorage.getItem(localWeatherKey)\r\n    if (localCity !== null && cityList.indexOf(localCity) >= 0) {\r\n      city = localCity\r\n    }\r\n\r\n    this.setState({\r\n      city\r\n    })\r\n  }\r\n\r\n  fetchWeatherForCity = () => {\r\n    fetch(getUrlForCity(this.state.city))\r\n      .then(response => response.json())\r\n      .then(data =>\r\n        this.setState({\r\n          data,\r\n          isLoaded: true\r\n        })\r\n      )\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchCityFromLocalStorage()\r\n    setTimeout(() => {\r\n      this.fetchWeatherForCity()\r\n    }, 1000)\r\n  }\r\n\r\n  handleChange = e => {\r\n    const city = e.target.value\r\n    this.setState({\r\n      isLoaded: false,\r\n      city: city\r\n    })\r\n    localStorage.setItem(localWeatherKey, city)\r\n    setTimeout(() => this.fetchWeatherForCity(), 2000)\r\n  }\r\n\r\n  render() {\r\n    const { data, isLoaded, city } = this.state\r\n    const citySelect = cityList.map(item => (\r\n      <MenuItem key={item} value={item}>\r\n        {item}\r\n      </MenuItem>\r\n    ))\r\n\r\n    return (\r\n      <div className='container bg'>\r\n        <FormControl disabled={!isLoaded}>\r\n          <InputLabel htmlFor='miasto'>Wybierz miasto</InputLabel>\r\n\r\n          <Select onChange={this.handleChange} value={city}>\r\n            {citySelect}\r\n          </Select>\r\n        </FormControl>\r\n        {isLoaded ? (\r\n          <div style={{ textAlign: 'center' }}>\r\n            <h1 style={{ marginBottom: 0 }}>{city}</h1>\r\n            <div\r\n              style={{\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                justifyContent: 'center',\r\n                marginBottom: 24\r\n              }}\r\n            >\r\n              {data.weather.map(weatherData => (\r\n                <IconWithDescription key={weatherData.id} {...weatherData} />\r\n              ))}\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <Grow in>\r\n            <div\r\n              className='container'\r\n              style={{ alignItems: 'center', margin: '21.44px 0' }}\r\n            >\r\n              <Skeleton variant='text' width={210} height={60} />\r\n              <Skeleton variant='circle' width={50} height={50} />\r\n              <Skeleton variant='text' width={160} height={20} />\r\n            </div>\r\n          </Grow>\r\n        )}\r\n        {isLoaded ? (\r\n          <Paper elevation={0}>\r\n            <Table>\r\n              <TableBody>\r\n                <TableRow>\r\n                  <TableCell>Średnia temperatura</TableCell>\r\n                  <TableCell align='right'>\r\n                    {isLoaded ? `${data.main.temp} °C` : <Loading />}\r\n                  </TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <TableCell variant='footer'>Temperatura minimalna</TableCell>\r\n                  <TableCell variant='footer' align='right'>\r\n                    {isLoaded ? `${data.main.temp_min} °C` : <Loading />}\r\n                  </TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <TableCell variant='footer'>Temperatura maksymalna</TableCell>\r\n                  <TableCell variant='footer' align='right'>\r\n                    {isLoaded ? `${data.main.temp_max} °C` : <Loading />}\r\n                  </TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <TableCell>Ciśnienie</TableCell>\r\n                  <TableCell align='right'>\r\n                    {isLoaded ? `${data.main.pressure} hPa` : <Loading />}\r\n                  </TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <TableCell>Wilgotność</TableCell>\r\n                  <TableCell align='right'>\r\n                    {isLoaded ? `${data.main.humidity} %` : <Loading />}\r\n                  </TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <TableCell>Prędkość wiatru</TableCell>\r\n                  <TableCell align='right'>\r\n                    {isLoaded ? (\r\n                      `${Math.round(data.wind.speed * 3.6)} m/s`\r\n                    ) : (\r\n                      <Loading />\r\n                    )}\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableBody>\r\n            </Table>\r\n          </Paper>\r\n        ) : (\r\n          <React.Fragment>\r\n            <Loading />\r\n            <Loading />\r\n            <Loading />\r\n            <Loading />\r\n            <Loading />\r\n            <Loading />\r\n          </React.Fragment>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}